name: autofix.ci  # needed to securely identify the workflow

on:
  pull_request:
  push:
    branches: [ "main" ]

# Cancel redundant runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write  # Required for autofix.ci to commit changes
  pull-requests: write  # Required for PR comments

jobs:
  # Fast checks that can run in parallel
  lint-and-format:
    runs-on: ubuntu-latest
    outputs:
      changes-made: ${{ steps.autofix.outputs.changes-made }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          # Removed cache: 'pip' - conflicts with UV dependency management

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      # Cache UV virtual environment
      - name: Cache UV venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-
        continue-on-error: true  # Don't fail workflow on cache timeout issues

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Run black formatter
        run: |
          uv run black . --check --diff || uv run black .

      - name: Run ruff with auto-fix
        run: |
          uv run ruff check . --fix --exit-zero

      # Only run autofix if this is the main job
      - name: Apply fixes
        id: autofix
        uses: autofix-ci/action@635ffb0c9798bd160680f18fd73371e355b85f27

  # Type checking runs separately for faster feedback
  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          # Removed cache: 'pip' - conflicts with UV dependency management

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Cache UV venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-
        continue-on-error: true  # Don't fail workflow on cache timeout issues

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Run mypy type checking
        run: |
          uv run mypy . || true

  # Optional: Run tests if they exist
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for test files
        id: check-tests
        run: |
          if find . -name "test*.py" -o -name "*_test.py" -o -path "*/tests/*" -name "*.py" | grep -q .; then
            echo "tests-exist=true" >> $GITHUB_OUTPUT
          else
            echo "tests-exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check-tests.outputs.tests-exist == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          # Removed cache: 'pip' - conflicts with UV dependency management

      - name: Install UV
        if: steps.check-tests.outputs.tests-exist == 'true'
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Cache UV venv
        if: steps.check-tests.outputs.tests-exist == 'true'
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-
        continue-on-error: true  # Don't fail workflow on cache timeout issues

      - name: Install dependencies
        if: steps.check-tests.outputs.tests-exist == 'true'
        run: uv sync --extra dev

      - name: Run tests
        if: steps.check-tests.outputs.tests-exist == 'true'
        run: |
          uv run pytest -v --tb=short

  # Summary job that requires all checks to pass
  all-checks:
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, test]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Checking job results:"
          echo "  lint-and-format: ${{ needs.lint-and-format.result }}"
          echo "  type-check: ${{ needs.type-check.result }}"
          echo "  test: ${{ needs.test.result }}"
          
          # Check if required jobs failed
          if [[ "${{ needs.lint-and-format.result }}" == "failure" ]]; then
            echo "❌ Lint and format job failed"
            exit 1
          fi
          
          if [[ "${{ needs.type-check.result }}" == "failure" ]]; then
            echo "❌ Type check job failed"
            exit 1
          fi
          
          # Test job failure is also a failure (if tests exist)
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "❌ Test job failed"
            exit 1
          fi
          
          # Check if any required job was cancelled
          if [[ "${{ needs.lint-and-format.result }}" == "cancelled" || "${{ needs.type-check.result }}" == "cancelled" ]]; then
            echo "❌ Required jobs were cancelled"
            exit 1
          fi
          
          echo "✅ All checks passed!"